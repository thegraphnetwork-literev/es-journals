version: 1.0
groups:
  develop:
    env-file: .env
    targets:
      test-certs:
        help: Generate and copy certs
        run: |
          mkdir -p containers/esconfig/certs
          docker cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt ./containers/esconfig/certs/
          curl --cacert ./containers/esconfig/certs/http_ca.crt -u elastic:{{ env.ES_PASSWORD }} https://localhost:9200/

      count-docs-in-index:
        help: |
          Download data from BioRxiv/MedRxiv API within a specified date range.  
        args:
          index-name:
            help: Specify the index name (e.g., 'biorxiv' or 'medrxiv')
            type: string
            required: true      
        shell: bash
        run: |
          python scripts/es_index_doc_counter.py {{ args.index_name }}

  scheduler:
    targets:
      download-rxivr:
        help: |
          Download data from BioRxiv/MedRxiv API within a specified date range.  
        args:
          server:
            help: Specify the server to download (e.g., 'biorxiv' or 'medrxiv')
            type: string
            required: true
          begin:
            help: Specify the start date in YYYY-MM-DD format
            type: string
            required: true
          end:
            help: Specify the end date in YYYY-MM-DD format
            type: string
            required: true
          target:
            help: Path to save the JSON file (e.g., 'data/')
            type: string
            required: true
        shell: Rscript
        run: |
          library(medrxivr)
          library(jsonlite)

          print("Starting download data from: {{ args.server }}")

          biorxiv_data <- mx_api_content(
            server = '{{ args.server }}',
            from_date = "{{ args.begin }}",
            to_date = "{{ args.end }}"
          )

          json_data <- toJSON(biorxiv_data, pretty = TRUE)

          json_file_path <- "{{ args.target }}{{ args.server }}_{{ args.begin }}_{{ args.end }}.json"
          writeLines(json_data, json_file_path)

          cat("Data object stored to:", "{{ args.server }}", "json file \n")
  
      setup-cron:
        help: Setup cron jobs for the develop user
        shell: bash
        run: |
          CRON_PATH="/opt/services/literev-elasticsearch/scripts/cronjobs"

          # Check if cronjob file exists
          if [ ! -f "$CRON_PATH" ]; then
            echo "Cronjob file does not exist at $CRON_PATH. Please create it first."
            exit 1
          fi

          # Add cron taks to develop user
          crontab -u devops $CRON_PATH

          echo "Cron jobs for LiteRev Elasticsearch have been set up successfully for user develop."

  clean:
    targets:
      all:
        help: Clean unnecessary temporary files
        run: |
          rm -fr build/
          rm -fr dist/
          rm -fr .eggs/
          find . -name '*.egg-info' -exec rm -fr {} +
          find . -name '*.egg' -exec rm -f {} +
          find . -name '*.pyc' -exec rm -f {} +
          find . -name
          find . -name '__pycache__' -exec rm -fr '*.pyo' -exec rm -f {} +
          find . -name '*~' -exec rm -f {} +{} +
          rm -f .coverage
          rm -fr htmlcov/
          rm -fr .pytest_cache
          rm -fr .mypy_cache
          rm -fr .ruff_cache

  docs:
    targets:
      build:
        help: Build documentation
        run: |
          mkdocs build --config-file docs/mkdocs.yaml

      preview:
        help: Preview documentation page locally
        dependencies:
          - target: docs.build
        run: |
          mkdocs build --config-file docs/mkdocs.yaml

  tests:
    targets:
      linter:
        help: Run linter tools
        run: |
          pre-commit install
          pre-commit run --all-files --verbose

      unit:
        help: run tests
        args:
          path:
            help: Specify the location of the tests
            type: string
            default: ""
          params:
            help: Specify parameters to be used for tests
            type: string
            default: "-vv"
        run: |
          pytest {{ args.path }} {{ args.params }}

      ci:
        help: run the sames tests executed on CI
        dependencies:
          - target: tests.unit
          - target: tests.linter

  release:
    vars:
      app: |
        npx --yes \
        -p semantic-release \
        -p "@semantic-release/commit-analyzer" \
        -p "@semantic-release/release-notes-generator" \
        -p "@semantic-release/changelog" \
        -p "@semantic-release/exec" \
        -p "@semantic-release/github" \
        -p "@semantic-release/git" \
        -p "@google/semantic-release-replace-plugin" \
        semantic-release

    targets:
      ci:
        help: run semantic release on CI
        run: {{ vars.app }} --ci

      dry:
        help: run semantic release in dry-run mode
        run: {{ vars.app }} --dry-run
